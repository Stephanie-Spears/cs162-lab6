
bool LinkedList::add(int val) //makes an ordered list...
{
	Node * current; //pointer to traverse the list
	Node *trailCurrent; //pointer just before the current
	Node *newNode; //pointer to create a node
	bool found;

	newNode = new Node; //create a node (allocate space in memory that can hold information for datatype "Node" (ie. address of the head/tail, space for data to be inserted, address of pointers to the prev and next nodes in the list)
	newNode->data = val; //store the given val inside the node's data section.
	newNode->next = NULL; //newnode's "next" link is set to null (since we're unsorted)
	newNode->prev = NULL; //newnode's "prev" link is set to null. *IS THIS OK HERE, OR DOES IT ALWAYS ASSUME THAT THE NEW VALUE IS ALONE 

	if (head == NULL)
	{//if the val passed in is the first to be added to the list
		head = newNode; //then the newnode data replaces the null of head and tail
		tail = newNode;
		count++;
	}
	else //if it's not the first in the list
	{
		found = false;
		current = head;

		while (current != NULL && !found) //while current doesn't point to an empty node, and found is still false
		{
			if (current->data >= val) //if the current pointer points to a value that is bigger than or equal to the value we're trying to pass in
			{
				found = true; //breaks out of the "notfound" while loop.
			}
			else
			{
				trailCurrent = current; //the address just before "current" is now set to "current"
				current = current->next; //the address of current is changed to the address of the following node link.
				//this is breaking (replacing) the old links to the previously contiguous nodes and allowing the new node to be linked up between them
			}
		}
		if (current == head) //if the current node IS THE FIRST node
		{
			head->prev = newNode; //insert newNode before first
			newNode->next = head; 
			head = newNode; //update address so now head points to the correct beginning
			count++;
		}
		else
		{
			if (current != NULL) //insert newnode between trailCurrent and current
			{
				trailCurrent->next = newNode;
				newNode->prev = trailCurrent;
				tail = newNode;
			}
			count++;
		}
	}
	return true;
}
1 3 7 9 10 12 12 10 9 7 3 1 9 10 10 9 